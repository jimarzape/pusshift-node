import unfetch from 'isomorphic-unfetch'; // TODO: retire @ergodark/types

/**
 * Re-export these
 */
export { unfetch };
/**
 * The default `config` all `fetch()` calls use by default. Will be merged
 * (overridden) with the `config` object passed into each call to `fetch()`, if
 * provided. See [unfetch](https://github.com/developit/unfetch) for valid
 * config keys.
 */

let globalFetchConfig = {
  method: 'POST',
  // credentials: 'include', // ? If you want to send and receive cookies
  headers: {
    'Content-Type': 'application/json'
  }
};
/**
 * Get the default config object merged in during all `fetch()` calls.
 */

export function getGlobalFetchConfig() {
  return globalFetchConfig;
}
/**
 * Set the default config object merged in during all `fetch()` calls.
 */

export function setGlobalFetchConfig(config) {
  globalFetchConfig = config;
}
/**
 * Performs an isomorphic (un)fetch and returns the JsonType response or
 * immediately rejects. Hence, `error` will always be undefined and `json` will
 * always be defined.
 *
 * @example
 * ```
 * try {
 *   const { json } = fetch('https://some.resource.com/data.json', {
 *     rejects: true
 *   });
 *   doSomethingWith(json);
 * } catch(e) {
 *   // ...
 * }
 * ```
 *
 * @throws When a non-2xx response is received
 */

export async function fetch(url, config) {
  const parsedOptions = { ...getGlobalFetchConfig(),
    ...(config !== null && config !== void 0 && config.swr ? {
      method: 'GET'
    } : {}),
    ...config,
    body: (config === null || config === void 0 ? void 0 : config.body) !== undefined ? JSON.stringify(config.body) : undefined
  };
  const res = await unfetch(url, parsedOptions);
  let json = undefined;
  let error = undefined;

  try {
    json = await res.json();
  } catch (err) {
    if (!(parsedOptions !== null && parsedOptions !== void 0 && parsedOptions.ignoreParseErrors)) throw err;
  }

  if (!res.ok) {
    error = json;
    json = undefined;
    if (parsedOptions !== null && parsedOptions !== void 0 && parsedOptions.swr || parsedOptions !== null && parsedOptions !== void 0 && parsedOptions.rejects) throw error;
  }

  return parsedOptions !== null && parsedOptions !== void 0 && parsedOptions.swr ? json : {
    res,
    json,
    error
  };
}
/**
 * Syntactic sugar for calling `fetch(..., { method: 'GET', ... })`.
 */

fetch.get = (url, config) => {
  return fetch(url, {
    method: 'GET',
    ...config
  });
};
/**
 * Syntactic sugar for calling `fetch(..., { method: 'PUT', ... })`.
 */


fetch.put = (url, config) => {
  return fetch(url, {
    method: 'PUT',
    ...config
  });
};
/**
 * Syntactic sugar for calling `fetch(..., { method: 'DELETE', ... })`.
 */


fetch.delete = (url, config) => {
  return fetch(url, {
    method: 'DELETE',
    ...config
  });
};
/**
 * Syntactic sugar for calling `fetch(..., { method: 'POST', ... })`.
 */


fetch.post = (url, config) => {
  return fetch(url, {
    method: 'POST',
    ...config
  });
};
/**
 * Syntactic sugar for SWR
 *
 * @see https://swr.vercel.app
 */


fetch.swr = async key => fetch(key, {
  swr: true
});